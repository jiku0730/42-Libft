# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    makeconfig                                         :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: kjikuhar <kjikuhar@student.42tokyo.jp>     +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2025/06/30 14:37:47 by kjikuhar          #+#    #+#              #
#    Updated: 2025/10/30 01:51:39 by kjikuhar         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

#-----------------------------------------------------------------------------
#> options
#-----------------------------------------------------------------------------
BLACK	:=	\033[30m
RED		:=	\033[31m
GREEN	:=	\033[32m
YELLOW	:=	\033[33m
BLUE	:=	\033[96m
MAGENTA	:=	\033[38;5;206m
CYAN	:=	\033[36m
WHITE	:=	\033[37m
RESET	:=	\033[0m
BOLD	:=	\033[1m
DIM		:=	\033[2m
ITALIC	:=	\033[3m
UNDER	:=	\033[4m
BLINK	:=	\033[5m
REVERSE	:=	\033[7m
HIDDEN	:=	\033[8m
PINK	:=	\033[35m

#-----------------------------------------------------------------------------
#‚ñ∏ variables
#-----------------------------------------------------------------------------
NAME		:=	$(LIB_NAME).a

#‚îÄ compile config ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CC			:=	cc
INCLUDE		:=	-Iincludes
CFLAGS		:=	-Wall -Wextra -Werror $(INCLUDE)

#‚îÄ directory name ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SRCDIR			:=	src
OBJDIR			:=	obj
TESTDIR			:=	test
TEST_FRAME_DIR	:=	-I../test_frame

#‚îÄ sources & objects ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# source files
SRC			:=	$(addprefix $(SRCDIR)/, $(SRC_FILES))
# object files
OBJ			:=	$(SRC:$(SRCDIR)/%.c=$(OBJDIR)/%.o)

#-----------------------------------------------------------------------------
#‚ñ∏ rules
#-----------------------------------------------------------------------------
all: $(NAME)

$(NAME): $(OBJ)
	@echo "$(GREEN)$(BOLD)Compiled with $(CFLAGS)$(RESET)"
	@ar rcs $@ $^
	@echo "$(YELLOW)$(BOLD)========================================="
	@echo "    You can use My $(NAME)!!"
	@echo "=========================================$(RESET)"

$(OBJDIR)/%.o: $(SRCDIR)/%.c
	@mkdir -p $(dir $@)
	@echo "Compiled ‚úÖ $(WHITE) $(BOLD) $^ $(RESET)"
	@$(CC) $(CFLAGS) -c  $^ -o $@

# clean targets
clean:
	@echo "$(RED)$(BOLD)========================================="
	@echo "    Cleaning up object files..."
	@echo "=========================================$(RESET)"
	@rm -rf $(OBJDIR)

fclean: clean
	@echo "$(RED)$(BOLD)========================================="
	@echo "    Cleaning up library files..."
	@echo "=========================================$(RESET)"
	@rm -f $(NAME)

re: fclean all

# „Éé„É´„É†„ÉÅ„Çß„ÉÉ„ÇØ
norminette:
	@echo "$(CYAN)$(BOLD)========================================="
	@echo "    Checking 42 Norm..."
	@echo "=========================================$(RESET)"
	@norminette $(SRC)
	@echo "$(GREEN)$(BOLD)Norm check completed!$(RESET)"

# test
test: re
	@echo "$(CYAN)$(BOLD)Running All Unit Tests$(RESET)"
	@[ -d "$(TESTDIR)" ] || { echo "$(RED)Error: $(TESTDIR) not found$(RESET)"; exit 1; }
	@TOTAL=0; PASSED=0; FAILED=0; \
	for test in $(TESTDIR)/tst_*.c; do \
		[ -f "$$test" ] || continue; \
		name=$$(basename $$test .c | sed 's/tst_//'); \
		TOTAL=$$((TOTAL + 1)); \
		if $(CC) $(CFLAGS) $(TEST_FRAME_DIR) $$test -o test_$$name $(NAME) 2>/dev/null && \
		   ./test_$$name > /tmp/test_out 2>&1; then \
			printf "$(GREEN)‚úì $$name$(RESET)\n"; \
			PASSED=$$((PASSED + 1)); \
		else \
			printf "$(RED)‚úó $$name$(RESET)\n"; \
			cat /tmp/test_out 2>/dev/null; \
			FAILED=$$((FAILED + 1)); \
		fi; \
		rm -f test_$$name /tmp/test_out; \
	done; \
	echo "$(CYAN)Passed: $$PASSED / Total: $$TOTAL$(RESET)"; \
	[ $$FAILED -eq 0 ] && echo "$(GREEN)üéâ All tests passed!$(RESET)" || { echo "$(RED)‚ùå $$FAILED failed$(RESET)"; exit 1; }

# MAKECMDGOALS „Åã„Çâ "unit_test" „ÇíÈô§„ÅÑ„ÅüÊÆã„Çä„Çí TARGETS „Å´„ÄÅ
# „Åï„Çâ„Å´ÂÖàÈ†≠Ë¶ÅÁ¥†„Çí FUNC „Å´
TARGETS := $(filter-out unit_test,$(MAKECMDGOALS))
FUNC    := $(firstword $(TARGETS))

unit_test: re
	@if [ -z "$(FUNC)" ]; then \
		printf "$(RED)$(BOLD)Error: please specify function name$(RESET)\n"; \
		printf "$(YELLOW)Usage: make unit_test [function_name]$(RESET)\n"; \
		exit 1; \
	fi
	@TEST_SRC=$(TESTDIR)/tst_$(FUNC).c; \
	if [ ! -f $$TEST_SRC ]; then \
	  printf "$(RED)$(BOLD)Error: $$TEST_SRC not found$(RESET)\n"; \
	  exit 1; \
	fi
	@printf "$(BLUE)==== Testing $(FUNC) ====\n$(RESET)"
	@$(CC) $(CFLAGS) $(TEST_FRAME_DIR) $(TESTDIR)/tst_$(FUNC).c -o test_$(FUNC) $(NAME)
	@printf "$(MAGENTA)Running unit test for $(FUNC)...$(RESET)\n"
	@valgrind --leak-check=full ./test_$(FUNC)
	@rm -f test_$(FUNC)
	@printf "$(GREEN)Test for $(FUNC) completed!$(RESET)\n"

# „ÉÜ„Çπ„Éà„Éï„Ç°„Ç§„É´‰∏ÄË¶ßË°®Á§∫
list_tests:
	@echo "$(CYAN)$(BOLD)========================================="
	@echo "    Available Test Files"
	@echo "=========================================$(RESET)"
	@ls $(TESTDIR)/tst_*.c 2>/dev/null | sed 's|$(TESTDIR)/tst_||g' | sed 's|\.c||g' | while read func; do \
		echo "$(GREEN)  $$func$(RESET)"; \
	done || echo "$(RED)No test files found$(RESET)"
	@echo "$(YELLOW)$(BOLD)Usage: make tset [function_name]$(RESET)"

# ÂºïÊï∞„ÇíÁÑ°Ë¶ñ„Åô„Çã„Åü„ÇÅ„ÅÆ„ÉÄ„Éü„Éº„Çø„Éº„Ç≤„ÉÉ„Éà Ôºà„Åü„Å®„Åà„Å∞ make unit_test ft_abs „ÅÆ "ft_abs"„ÇíÁÑ°Ë¶ñ„Åô„ÇãÔºâ
%:
    @:

.PHONY: all clean fclean re norminette test unit_test list_tests
